package com.alcanl.app.application.ui.view.form;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import jakarta.annotation.PostConstruct;
import lombok.Getter;
import org.springframework.stereotype.Component;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.lang.reflect.Method;
import java.util.Locale;
import java.util.ResourceBundle;

@SwingContainer
@Component("bean.form.login")
@SuppressWarnings("ALL")
public class LoginForm extends JFrame {
    @Getter
    private JPanel panelMain;
    private JLabel labelLogo;
    private JLabel labelUserName;
    @Getter
    private JTextField textFieldUserName;
    private JLabel labelPassword;
    @Getter
    private JPasswordField fieldPassword;
    private JPanel panelLogo;
    private JPanel panelUser;
    @Getter
    private JButton buttonLogin;
    private JPanel panelLogin;
    private JLabel labelVersion;
    private JLabel labelRights;
    @Getter
    private JLabel labelVisibility;
    private JLabel labelBalance;

    @PostConstruct
    private void postConstruct() {
        dispose();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelMain = new JPanel();
        panelMain.setLayout(new GridLayoutManager(2, 2, new Insets(10, 10, 10, 10), -1, -1));
        panelMain.setBackground(new Color(-1));
        panelLogo = new JPanel();
        panelLogo.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        panelLogo.setBackground(new Color(-1));
        panelMain.add(panelLogo, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        labelLogo = new JLabel();
        labelLogo.setIcon(new ImageIcon(getClass().getResource("/kismet.jpg")));
        labelLogo.setText("");
        panelLogo.add(labelLogo, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panelLogin = new JPanel();
        panelLogin.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        panelLogin.setBackground(new Color(-1));
        panelMain.add(panelLogin, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panelUser = new JPanel();
        panelUser.setLayout(new GridLayoutManager(6, 3, new Insets(20, 60, 20, 60), -1, -1));
        panelUser.setBackground(new Color(-1));
        panelLogin.add(panelUser, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panelUser.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-11709338)), this.$$$getMessageFromBundle$$$("values", "panel.login.title"), TitledBorder.LEFT, TitledBorder.TOP, this.$$$getFont$$$("Segoe UI Semibold", -1, 12, panelUser.getFont()), new Color(-12169629)));
        labelUserName = new JLabel();
        Font labelUserNameFont = this.$$$getFont$$$("Segoe UI", Font.BOLD, 16, labelUserName.getFont());
        if (labelUserNameFont != null) labelUserName.setFont(labelUserNameFont);
        labelUserName.setForeground(new Color(-12169629));
        labelUserName.setHorizontalTextPosition(10);
        labelUserName.setIcon(new ImageIcon(getClass().getResource("/icons/icon_user.png")));
        this.$$$loadLabelText$$$(labelUserName, this.$$$getMessageFromBundle$$$("values", "panel.login.user.name"));
        panelUser.add(labelUserName, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textFieldUserName = new JTextField();
        textFieldUserName.setBackground(new Color(-1));
        textFieldUserName.setHorizontalAlignment(0);
        panelUser.add(textFieldUserName, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        labelPassword = new JLabel();
        Font labelPasswordFont = this.$$$getFont$$$("Segoe UI", Font.BOLD, 16, labelPassword.getFont());
        if (labelPasswordFont != null) labelPassword.setFont(labelPasswordFont);
        labelPassword.setForeground(new Color(-12169629));
        labelPassword.setHorizontalAlignment(10);
        labelPassword.setHorizontalTextPosition(10);
        labelPassword.setIcon(new ImageIcon(getClass().getResource("/icons/icon_password.png")));
        this.$$$loadLabelText$$$(labelPassword, this.$$$getMessageFromBundle$$$("values", "panel.login.password"));
        labelPassword.setVerticalTextPosition(0);
        panelUser.add(labelPassword, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fieldPassword = new JPasswordField();
        fieldPassword.setBackground(new Color(-1));
        fieldPassword.setHorizontalAlignment(0);
        panelUser.add(fieldPassword, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        buttonLogin = new JButton();
        buttonLogin.setBackground(new Color(-1));
        Font buttonLoginFont = this.$$$getFont$$$("Segoe UI", -1, 14, buttonLogin.getFont());
        if (buttonLoginFont != null) buttonLogin.setFont(buttonLoginFont);
        buttonLogin.setForeground(new Color(-12169629));
        buttonLogin.setHorizontalTextPosition(0);
        buttonLogin.setIcon(new ImageIcon(getClass().getResource("/icons/icon_login.png")));
        this.$$$loadButtonText$$$(buttonLogin, this.$$$getMessageFromBundle$$$("values", "button.login"));
        buttonLogin.setVerticalAlignment(0);
        buttonLogin.setVerticalTextPosition(3);
        panelUser.add(buttonLogin, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panelUser.add(spacer1, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(30, 30), null, null, 0, false));
        labelVisibility = new JLabel();
        labelVisibility.setIcon(new ImageIcon(getClass().getResource("/icons/icon_hidden.png")));
        labelVisibility.setText("");
        panelUser.add(labelVisibility, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelBalance = new JLabel();
        labelBalance.setText("    ");
        panelUser.add(labelBalance, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelVersion = new JLabel();
        Font labelVersionFont = this.$$$getFont$$$(null, -1, 8, labelVersion.getFont());
        if (labelVersionFont != null) labelVersion.setFont(labelVersionFont);
        this.$$$loadLabelText$$$(labelVersion, this.$$$getMessageFromBundle$$$("values", "kismet.auto.stock.tracking.system.app.version"));
        panelMain.add(labelVersion, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelRights = new JLabel();
        Font labelRightsFont = this.$$$getFont$$$(null, -1, 8, labelRights.getFont());
        if (labelRightsFont != null) labelRights.setFont(labelRightsFont);
        this.$$$loadLabelText$$$(labelRights, this.$$$getMessageFromBundle$$$("values", "panel.login.rights.info"));
        panelMain.add(labelRights, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    private static Method $$$cachedGetBundleMethod$$$ = null;

    private String $$$getMessageFromBundle$$$(String path, String key) {
        ResourceBundle bundle;
        try {
            Class<?> thisClass = this.getClass();
            if ($$$cachedGetBundleMethod$$$ == null) {
                Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
                $$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
            }
            bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
        } catch (Exception e) {
            bundle = ResourceBundle.getBundle(path);
        }
        return bundle.getString(key);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelMain;
    }
}
